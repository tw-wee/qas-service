buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.flywaydb:flyway-gradle-plugin:$flywayVersion")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
//apply plugin: 'findbugs'
//apply plugin: 'docker'

mainClassName = "tw.wee.qas.Application"

jar {
    baseName = "$jarBaseName"
    version = "$jarVersion"
}

repositories {
    mavenCentral()
}

sourceCompatibility = "$javaVersion"
targetCompatibility = "$javaVersion"
idea.project.vcs = "Git"

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources', 'src/integrationTest/resources']
    }
    integrationTest {
        java.srcDirs = ['src/integrationTest/java']
//        resources.srcDirs = ['src/integrationTest/resources']
    }
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.apache.logging.log4j:log4j:$log4jVersion")
    compile("org.flywaydb:flyway-core:$flywayVersion")
    compile("mysql:mysql-connector-java:$mysqlVersion")
    compile("io.springfox:springfox-swagger2:$swaggerVersion")
    compile("io.springfox:springfox-swagger-ui:$swaggerVersion")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

defaultTasks 'clean', 'build'

//checkstyleTest.exclude '**/*.*'
//checkstyleIntegrationTest.exclude '**/*.*'


clean.dependsOn flywayRepair
build.dependsOn flywayMigrate


task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

build.dependsOn integrationTest


jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Application**',
                                        '**/Health**',
                                        '**/configuration/**',
                                        '**/controller/**',
                                        '**/domain/**',
                                        'repository/**'])
        })
    }
}

task checkTestCoverage << {
    def coverageReportPath = "build/reports/jacoco/test/html/index.html"
    def coverageFile = new File(coverageReportPath)
    def matcher = ( coverageFile.text =~ /<tfoot>(.*)<\/tfoot>/ )
    def coverageString = new XmlParser().parseText(matcher[0][0])

    def lineCoverageString = coverageString.tr.td[2].text()
    def branchCoverageString = coverageString.tr.td[4].text()
    def actualLineCoverage = lineCoverageString.substring(0,lineCoverageString.length() - 1).toInteger()
    def actualBranchCoverage = branchCoverageString.substring(0,branchCoverageString.length() - 1)

    if(actualLineCoverage < expectedLineCoverage.toInteger()) {
        throw new RuntimeException("Code line coverage is "+actualLineCoverage+"%, but expected is "+expectedLineCoverage+"%.\n"+"Please check "+coverageReportPath +" for more detail.")
    }

    actualBranchCoverage = actualBranchCoverage.isInteger() ? actualBranchCoverage.toInteger() : expectedBranchCoverage.toInteger()
    if(actualBranchCoverage < expectedBranchCoverage.toInteger()) {
        throw new RuntimeException("Code branch coverage is "+actualBranchCoverage+"%, but expected is "+expectedBranchCoverage+"%.\n"+"Please check "+coverageReportPath +" for more detail.")
    }
}

checkTestCoverage.dependsOn jacocoTestReport
build.dependsOn checkTestCoverage


task wrapper(type: Wrapper) {
    gradleVersion = "$gradleVersion"
}